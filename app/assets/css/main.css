@charset "UTF-8";
/*-----------------------------------------------------------------------------/ Project: Padr√£o Front End ===========================================   TABLE OF CONTENTS  #SETTINGS................Global variables, config switches. #TOOLS...................Default mixins and functions. #GENERIC.................Ground-zero styles (resets, box-sizing). #BASE....................Unclassed HTML elements (type selectors). #OBJECTS.................Cosmetic-free design patterns. #COMPONENTS..............Designed components, chunks of UI. #TRUMPS..................Helpers and overrides.    ATTENTION: The following parts are imported in the right order DO NOT CHANGE THE ORDER OF THE IMPORTS IN THIS FILE!!!!!  HINT: Each of these parts live in their own directory. Further explanation is provided in the dedicated folders. 
/-----------------------------------------------------------------------------*/
@import url("http://fonts.googleapis.com/css?family=Rokkitt:400,700");
/** List functions courtesy of the wonderful folks at Team Sass. Check out their awesome grid: Singularity. */
/** Get  percentage from a given ratio. @param {number} [$ratio=1] - The column ratio of the element. @returns {number} - The percentage value. */
/** Work out the column widths based on the ratio and gutter sizes. @param {number} [$ratios=1] - The column ratio of the element. @param {number} [$gutter=$jeet-gutter] - The gutter for the column. @returns {list} $width $gutter - A list containing the with and gutter for the element. */
/** Get the set layout direction for the project. @returns {string} $direction - The layout direction. */
/** Replace a specified list value with a new value (uses built in set-nth() if available) @param {list} $list - The list of values you want to alter. @param {number} $index - The index of the list item you want to replace. @param {*} $value - The value you want to replace $index with. @returns {list} $list - The list with the value replaced or removed. @warn if an invalid index is supplied. */
/** Reverse a list (progressively enhanced for Sass 3.3) @param {list} $list - The list of values you want to reverse. @returns {list} $result - The reversed list. */
/** Get the opposite direction to a given value. @param {string} $dir - The direction you want the opposite of. @returns {string} - The opposite direction to $dir. @warn if an incorrect string is provided. */
/** Style an element as a column with a gutter. @param {number} [$ratios=1] - A width relative to its container as a fraction. @param {number} [$offset=0] - A offset specified as a fraction (see $ratios). @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns. @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one. @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width. */
/** An alias for the column mixin. @param [$args...] - All arguments get passed through to column(). */
/** Get the width of a column and nothing else. @param {number} [$ratios=1] - A width relative to its container as a fraction. @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width. */
/** Get the gutter size of a column and nothing else. @param {number} [ratios=1] - A width relative to its container as a fraction. @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width. */
/** An alias for the column-width function. @param [$args...] - All arguments get passed through to column(). */
/** An alias for the column-gutter function. @param [$args...] - All arguments get passed through to column(). */
/** Style an element as a column without any gutters for a seamless row. @param {number} [$ratios=1] - A width relative to its container as a fraction. @param {number} [$offset=0] - A offset specified as a fraction (see $ratios). @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns. @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one. */
/** Reorder columns without altering the HTML. @param {number} [$ratios=0] - Specify how far along you want the element to move. @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not. @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width. */
/** Reset an element that has had shift() applied to it. */
/** View the grid and its layers for easy debugging. @param {string} [$color=black] - The background tint applied. @param {boolean} [$important=false] - Whether to apply the style as !important. */
/** Alias for edit(). */
/** Horizontally center an element. @param {number} [$max-width=1410px] - The max width the element can be. @param {number} [$pad=0] - Specify the element's left and right padding. */
/** Uncenter an element. */
/** Stack an element so that nothing is either side of it. @param {number} [$pad=0] - Specify the element's left and right padding. @param {boolean/string} [$align=false] - Specify the text align for the element. */
/** Unstack an element. */
/** Center an element on either or both axes. @requires A parent container with relative positioning. @param {string} [$direction=both] - Specify which axes to center the element on. */
/** Apply a clearfix to an element. */
.container:before, #topbar:before, #topbar .contact-list:before, #topbar .topbar-lang:before, #topbar .topbar-currency:before, .container:after, #topbar:after, #topbar .contact-list:after, #topbar .topbar-lang:after, #topbar .topbar-currency:after { content: " "; display: table; }
.container:after, #topbar:after, #topbar .contact-list:after, #topbar .topbar-lang:after, #topbar .topbar-currency:after { clear: both; }

.container { display: block; margin-left: auto; margin-right: auto; float: none; }

/*--------------------------------------------------*\ #Generic styles
\*--------------------------------------------------*/
* { outline: none; }

article, aside, details, figcaption, figure, footer, header, hgroup, nav, section, summary { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; height: 0; }

[hidden], template { display: none; }

html { background: #fff; color: #000; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }

html, button, input, select, textarea { font-family: sans-serif; }

body { margin: 0; }

a { background: transparent; }
a:focus { outline: thin dotted; }
a:hover, a:active { outline: 0; }

h1 { font-size: em(44px); margin: 0.67em 0; }

h2 { font-size: em(37px); margin: 0.83em 0; }

h3 { font-size: em(27px); margin: 1em 0; }

h4 { font-size: em(23px); margin: 1.33em 0; }

h5 { font-size: em(18px); margin: 1.67em 0; }

h6 { font-size: 1em; margin: 2.33em 0; }

abbr[title] { border-bottom: 1px dotted; }

b, strong { font-weight: bold; }

dfn { font-style: italic; }

mark { background: #ff0; color: #000; }

code, kbd, pre, samp { font-family: monospace, serif; font-size: 1em; }

pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; }

q { quotes: "\201C" "\201D" "\2018" "\2019"; }

q:before, q:after { content: ''; content: none; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0; }

svg:not(:root) { overflow: hidden; }

figure { margin: 0; }

fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; }

legend { border: 0; padding: 0; white-space: normal; }

button, input, select, textarea { font-family: inherit; font-size: 100%; margin: 0; vertical-align: baseline; }

button, input { line-height: normal; }

button, select { text-transform: none; }

button, html input[type="button"], input[type="reset"], input[type="submit"] { -webkit-appearance: button; cursor: pointer; }

button[disabled], input[disabled] { cursor: default; }

button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }

textarea { overflow: auto; vertical-align: top; }

table { border-collapse: collapse; border-spacing: 0; }

input[type="search"] { -webkit-appearance: textfield; -moz-box-sizing: content-box; -webkit-box-sizing: content-box; box-sizing: content-box; }
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; padding: 0; }

*, *:after, *:before { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }

a { color: gray; -webkit-transition: color 0.3s ease; -moz-transition: color 0.3s ease; -ms-transition: color 0.3s ease; -o-transition: color 0.3s ease; transition: color 0.3s ease; }
a:hover { color: black; }

ul { list-style: none; margin: 0px; padding: 0px; }

body { background-color: #ffffff; color: #1b2026; font-family: "Rokkitt", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif; font-weight: 400; font-style: normal; }

h1, h2, h3, h4, h5, h6 { font-family: "Rokkitt", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif; font-weight: 400; font-style: normal; color: #1b2026; text-rendering: optimizeLegibility; margin-top: 0.2em; margin-bottom: 0.5em; line-height: 1.4; }

h1 { font-size: em(44px); }

h2 { font-size: em(37px); }

h3 { font-size: em(27px); }

h4 { font-size: em(23px); }

h5 { font-size: em(18px); }

h6 { font-size: 1em; }

hr { border: solid #bababa; border-width: 1px 0 0; clear: both; margin: em(20px) 0 em(20px)-rem-calc(1px); height: 0; }

p { font-family: inherit; font-weight: 400; font-size: 1em; line-height: 1.6; margin-bottom: em(20px); text-rendering: optimizeLegibility; }

em, i { font-style: italic; line-height: inherit; }

strong, b { font-weight: 700; line-height: inherit; }

small { font-size: 60%; line-height: inherit; }

a { text-decoration: none; }
a:hover, a:not[class^="btn--"] { text-decoration: underline; }

/*--------------------------------------------------*\ #Objects
\*--------------------------------------------------*/
/*--------------------------------------------------*\ #Components
\*--------------------------------------------------*/
/* http: //live.yithemes.com/bishop/ */
.container { width: 100%; max-width: 1170px; }

.header__top { background-color: #1b2026; outline: 0 none !important; border-bottom-color: #212121; border-bottom: 1px solid #ebebeb; }

/* Topbar */
#topbar { color: #ffffff; font-size: 0.9375rem; font-style: normal; font-weight: 400; text-align: left; text-transform: none; padding-top: 2px; line-height: 27px; /* Redes Sociais */ /* Lingua e Moeda */ }
#topbar .contact-list { /* Telefone */ }
#topbar .contact-list li { font-size: 1.25em; float: left; padding-right: 5px; }
#topbar .contact-list li a { color: #ffffff; margin: 4px; display: inline-block; line-height: normal; }
#topbar .contact-list li a :hover { color: #b4ad82; }
#topbar .contact-list .contact-tel { font-size: 0.75em; }
#topbar .topbar-lang, #topbar .topbar-currency { float: right; }
#topbar .topbar-lang li, #topbar .topbar-currency li { font-size: 0.75em; float: right; padding-left: 10px; text-transform: uppercase; }
#topbar .topbar-lang li a, #topbar .topbar-currency li a { color: #ffffff; }
#topbar .topbar-lang li a :hover, #topbar .topbar-currency li a :hover { color: #b4ad82; }

#topbar__contact { *zoom: 1; float: left; clear: none; text-align: inherit; width: 48.5%; margin-left: 0%; margin-right: 3%; }
#topbar__contact:before, #topbar__contact:after { content: ''; display: table; }
#topbar__contact:after { clear: both; }
#topbar__contact:last-child { margin-right: 0%; }

/* Paises */
#topbar__pais { *zoom: 1; float: left; clear: none; text-align: inherit; width: 48.5%; margin-left: 0%; margin-right: 3%; }
#topbar__pais:before, #topbar__pais:after { content: ''; display: table; }
#topbar__pais:after { clear: both; }
#topbar__pais:last-child { margin-right: 0%; }

.float-right { float: right; }

.fa { font-size: .8em; line-height: 22px !important; }

dropdown { display: inline-block; margin: 20px 50px; }

dropdown label, dropdown ul li { display: block; width: 200px; background: #ECF0F1; padding: 15px 20px; }

dropdown label:hover, dropdown ul li:hover { background: #336699; color: white; cursor: pointer; }

dropdown label { color: #336699; border-left: 4px solid #336699; border-radius: 0 5px 0 0; position: relative; z-index: 2; }

dropdown input { display: none; }

dropdown input ~ ul { position: relative; visibility: hidden; opacity: 0; top: -20px; z-index: 1; }

dropdown input:checked + label { background: #336699; color: white; }

dropdown input:checked ~ ul { visibility: visible; opacity: 1; top: 0; }

.animate { -webkit-transition: all .3s; -moz-transition: all .3s; -ms-transition: all .3s; -ms-transition: all .3s; transition: all .3s; backface-visibility: hidden; -webkit-backface-visibility: hidden; /* Chrome and Safari */ -moz-backface-visibility: hidden; /* Firefox */ -ms-backface-visibility: hidden; /* Internet Explorer */ }

/*



.parents-options{
	@include col(1/4);
	font-size: rem(16);
	
	.currency{
		@include col(1/2);
		font-size: em(13);
	}
	
	.language{
		@include col(1/2);
		font-size: em(13);
	}
}

.purchase-menu{
	@include col(3/4);
	font-size: rem(16);
	
	ul{
		float: right;
		li{
			font-size: em(13);
			float:left;
			display:list-item;
			list-style: none;
			
			& a{
				display:block;
				text-decoration:none;	
				margin-right: em(15);
				@include transition (all 0.2s ease-in-out);
				
				&:hover{
					color: $light-blue;
				}
			}
		}
	}
}
















aside { @include col(1/3); background: #1c893b; font-size: rem(20);  	p {
	 font-size: em(20);	 	}  @include breakpoint($desktop) { @include col(2/3); }
}

article { @include col(2/3); background: #1920e3; font-size: rem(40);  	h1 {
	 font-size: em(20);	 	} 
}



header { @include breakpoint($desktop) { background: #333; }
}

header { @include breakpoint($mobile-small) { background: #f80b0b; }
}

header { @include breakpoint($tablet) { background: #ff00f2; }
}
*/
